name: Tagged Release

on:
  push:
    tags: [ "v*" ]

jobs:
  build:
    # Arch Matrix
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        short-os: [win, osx, linux]
        include:
          - short-os: osx
            os: macos-latest
            rust-os: apple-darwin
            tauri-bundles: dmg,app
            tauri-create-updater: true
          - short-os: win
            os: windows-latest
            rust-os: pc-windows-msvc
            tauri-bundles: nsis
            tauri-create-updater: true
          - short-os: linux
            os: ubuntu-24.04
            rust-os: unknown-linux-gnu
            tauri-bundles: deb,rpm
            tauri-create-updater: false
          - arch: x64
            rust-arch: x86_64
          - arch: arm64
            rust-arch: aarch64
          - short-os: linux
            arch: arm64
            os: ubuntu-24.04-arm
    uses: ./.github/workflows/reusable-tauri.yml
    with:
      arch: ${{ matrix.arch }}
      rust-arch: ${{ matrix.rust-arch }}
      os: ${{ matrix.os }}
      short-os: ${{ matrix.short-os }}
      rust-os: ${{ matrix.rust-os }}
      tauri-bundles: ${{ matrix.tauri-bundles }}
      publish-release: ${{ true }}
      tauri-create-updater: ${{ matrix.tauri-create-updater }}
      api-ref: 'v0.22.4'
    secrets: inherit # Pass all secrets
  create-github-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Publish Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release edit ${{ github.ref_name }} --latest --draft=false
  create-aur-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install toml-cli
        shell: pwsh
        run: cargo install toml-cli
      - name: Replace PKGBUILD Variables
        shell: pwsh
        run: |
          $env:CARGO_TOML = toml get ${{ github.workspace }}/src-tauri/Cargo.toml .
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/aur" -Destination "${{ github.workspace }}/aurdefs" -Recurse -Force
          (Get-Content ${{ github.workspace }}/aurdefs/PKGBUILD).
            Replace('${CARGO_PKG_VERSION}', $(echo $env:CARGO_TOML | jq -r .package.version)).
            Replace('${CARGO_PKG_DESCRIPTION}', $(echo $env:CARGO_TOML | jq -r .package.description)).
            Replace('${CARGO_PKG_HOMEPAGE}', $(echo $env:CARGO_TOML | jq -r .package.homepage)).
            Replace('${AUR_GITHUB_REPO}', '${{ github.repository }}').
            Replace('${APP_BINARY_NAME}', $(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json)).
            Replace('${AUR_DEB_SHA256_AMD64}', '${{ needs.build.outputs.deb-sha256-x64 }}').
            Replace('${AUR_DEB_SHA256_ARM64}', '${{ needs.build.outputs.deb-sha256-arm64 }}') `
          | Set-Content ${{ github.workspace }}/aurdefs/PKGBUILD
      - name: Publish AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: sauna-sim
          pkgbuild: ${{ github.workspace }}/aurdefs/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package to ${{ github.ref_name }}
          ssh_keyscan_types: rsa,ecdsa,ed25519
          assets: |
            ${{ github.workspace }}/aurdefs/sauna-sim.install
  cleanup-github-release:
    if: failure()
    runs-on: ubuntu-24.04
    needs: [build, create-github-release]
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Remove Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release delete ${{ github.ref_name }} -y
