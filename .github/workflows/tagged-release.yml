name: Tagged Release

on:
  push:
    tags: [ "v*" ]

jobs:
  build:
    # Arch Matrix
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        short-os: [win, osx, linux]
        include:
          - short-os: osx
            os: macos-latest
            rust-os: apple-darwin
            tauri-bundles: dmg,app
            tauri-create-updater: true
          - short-os: win
            os: windows-latest
            rust-os: pc-windows-msvc
            tauri-bundles: nsis
            tauri-create-updater: true
          - short-os: linux
            os: ubuntu-22.04
            rust-os: unknown-linux-gnu
            tauri-bundles: deb,rpm
            tauri-create-updater: false
          - arch: x64
            rust-arch: x86_64
          - arch: arm64
            rust-arch: aarch64
          - short-os: linux
            arch: arm64
            os: ubuntu-22.04-arm
    uses: ./.github/workflows/reusable-tauri.yml
    with:
      arch: ${{ matrix.arch }}
      rust-arch: ${{ matrix.rust-arch }}
      os: ${{ matrix.os }}
      short-os: ${{ matrix.short-os }}
      rust-os: ${{ matrix.rust-os }}
      tauri-bundles: ${{ matrix.tauri-bundles }}
      publish-release: ${{ true }}
      tauri-create-updater: ${{ matrix.tauri-create-updater }}
      api-ref: 'v0.22.4'
    secrets: inherit # Pass all secrets
  generate-handlebars-variables:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    needs: build
    runs-on:  ubuntu-22.04
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install toml-cli
        shell: pwsh
        run: cargo install toml-cli
      - name: Generate variables
        shell: pwsh
        run: |
          $env:CARGO_TOML = toml get ${{ github.workspace }}/src-tauri/Cargo.toml .
          echo @"
          {
            "app": {
              "binaryName": "$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json)",
              "version": "$(echo $env:CARGO_TOML | jq -r .package.version)",
              "homepage": "$(echo $env:CARGO_TOML | jq -r .package.homepage)",
              "shortDesc": "$(echo $env:CARGO_TOML | jq -r .package.description)"
            },
            "githubRepo": "${{ github.repository }}",
            "deb": {
              "sha256": {
                "amd64": "${{ needs.build.outputs.deb-sha256-x64 }}",
                "arm64": "${{ needs.build.outputs.deb-sha256-arm64 }}"
              }
            }
          }
          "@ > variables.json
          echo $(cat variables.json)
      - name: Upload variables.json
        uses: actions/upload-artifact@v4
        with:
          name: variables-json
          path: variables.json
  create-github-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Publish Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release edit ${{ github.ref_name }} --latest --draft=false
  publish-aur-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-22.04
    needs: [generate-handlebars-variables, create-github-release]
    continue-on-error: true
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace PKGBUILD Variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/aur" -Destination "${{ github.workspace }}/aurdefs" -Recurse -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/aurdefs/PKGBUILD | Set-Content -Path ${{ github.workspace }}/aurdefs/PKGBUILD
          echo $(cat ${{ github.workspace }}/aurdefs/PKGBUILD)
      - name: Publish AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: sauna-sim
          pkgbuild: ${{ github.workspace }}/aurdefs/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package to ${{ github.ref_name }}
          ssh_keyscan_types: rsa,ecdsa,ed25519
          assets: |
            ${{ github.workspace }}/aurdefs/sauna-sim.install
  publish-snap-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    needs: [generate-handlebars-variables, create-github-release]
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            deb-arch: amd64
          - os: ubuntu-22.04-arm
            deb-arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace snapcraft.yml variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/snapcraft/snapcraft.yaml" -Destination "${{ github.workspace }}" -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/snapcraft.yaml | Set-Content -Path ${{ github.workspace }}/snapcraft.yaml
          echo $(cat ${{ github.workspace }}/snapcraft.yaml)
      - name: Download deb file
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ github.ref_name }} -p "$(jq -r .app.binaryName ${{ github.workspace }}/variables.json)_$(jq -r .app.version ${{ github.workspace }}/variables.json)_${{ matrix.deb-arch }}.deb" -O SaunaSim.deb
      - id: snap-build
        name: Build Snap
        uses: snapcore/action-build@v1
      - name: Publish Snap
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
        with:
          snap: ${{ steps.snap-build.outputs.snap }}
          release: edge
  publish-flathub-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-22.04
    needs: [generate-handlebars-variables, create-github-release]
    continue-on-error: true
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Install hbs-cli
        shell: pwsh
        run: cargo install hbs-cli
      - name: Download variables.json
        uses: actions/download-artifact@v4
        with:
          name: variables-json
      - name: Replace flathub manifest variables
        shell: pwsh
        run: |
          Copy-Item -Path "${{ github.workspace }}/src-tauri/packageinfo/flathub/com.saunasim.saunasim.yml" -Destination "${{ github.workspace }}" -Force
          hbs-cli ${{ github.workspace }}/variables.json ${{ github.workspace }}/com.saunasim.saunasim.yml | Set-Content -Path ${{ github.workspace }}/com.saunasim.saunasim.yml
          echo $(cat ${{ github.workspace }}/com.saunasim.saunasim.yml)
      - name: Upload flathub manifest to release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.ref_name }} ${{ github.workspace }}/com.saunasim.saunasim.yml --clobber
  cleanup-github-release:
    if: failure()
    runs-on: ubuntu-22.04
    needs: [build, create-github-release]
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Remove Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release delete ${{ github.ref_name }} -y
