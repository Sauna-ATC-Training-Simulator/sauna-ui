name: Tagged Release

on:
  push:
    tags: [ "v*" ]

jobs:
  build:
    # Arch Matrix
    strategy:
      fail-fast: false
      matrix:
        arch: [x64, arm64]
        short-os: [win, osx, linux]
        include:
          - short-os: osx
            os: macos-latest
            rust-os: apple-darwin
            tauri-bundles: dmg,app
            tauri-create-updater: true
          - short-os: win
            os: windows-latest
            rust-os: pc-windows-msvc
            tauri-bundles: nsis
            tauri-create-updater: true
          - short-os: linux
            os: ubuntu-24.04
            rust-os: unknown-linux-gnu
            tauri-bundles: deb,rpm
            tauri-create-updater: false
          - arch: x64
            rust-arch: x86_64
          - arch: arm64
            rust-arch: aarch64
          - short-os: linux
            arch: arm64
            os: ubuntu-24.04-arm
    uses: ./.github/workflows/reusable-tauri.yml
    with:
      arch: ${{ matrix.arch }}
      rust-arch: ${{ matrix.rust-arch }}
      os: ${{ matrix.os }}
      short-os: ${{ matrix.short-os }}
      rust-os: ${{ matrix.rust-os }}
      tauri-bundles: ${{ matrix.tauri-bundles }}
      publish-release: ${{ true }}
      tauri-create-updater: ${{ matrix.tauri-create-updater }}
      api-ref: 'v0.22.4'
    secrets: inherit # Pass all secrets
  create-github-release:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Publish Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release edit ${{ needs.build.outputs.release-tag }} --latest --draft=false
  create-aur-package:
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')}}
    runs-on: ubuntu-24.04
    needs: build
    continue-on-error: true
    env:
      AUR_GENERATE_DEFS: true
      AUR_PACKAGE_NAME: sauna-sim
      AUR_DEFS_OUTPUT: ${{ github.workspace }}/aurpkg
      AUR_DEB_PREFIX: SaunaSim
      AUR_GITHUB_REPO: ${{ github.repository }}
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: "linux-x64"
          shared-key: "tauri-build-aur"
          workspaces: |
            ./src-tauri -> target
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add x86_64-unknown-linux-gnu
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libappindicator3-dev librsvg2-dev libudev-dev patchelf \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2
      - name: npm install
        run: npm install
      - name: Get Deb Checksums
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download ${{ needs.build.outputs.release-tag }} '*.deb'
          echo AUR_DEB_SHA256_AMD64=$((Get-FileHash ${{ env.AUR_DEB_PREFIX }}_${{ needs.build.outputs.release-version}}_amd64.deb -Algorithm SHA256).Hash) >> "$env:GITHUB_ENV"
          echo AUR_DEB_SHA256_ARM64=$((Get-FileHash ${{ env.AUR_DEB_PREFIX }}_${{ needs.build.outputs.release-version}}_arm64.deb -Algorithm SHA256).Hash) >> "$env:GITHUB_ENV"
      - name: Create Package Def
        run: |
          mkdir -p ${{ env.AUR_DEFS_OUTPUT }}
          npm run tauri build
      - name: Publish AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v3
        with:
          pkgname: ${{ env.AUR_PACKAGE_NAME }}
          pkgbuild: ${{ env.AUR_DEFS_OUTPUT }}/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: Update AUR package
          ssh_keyscan_types: rsa,ecdsa,ed25519
          assets: |
            ${{ env.AUR_DEFS_OUTPUT }}/*.install

  cleanup-github-release:
    if: failure()
    runs-on: ubuntu-24.04
    needs: [build, create-github-release]
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Remove Github Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: gh release delete ${{ needs.build.outputs.release-tag }} -y
