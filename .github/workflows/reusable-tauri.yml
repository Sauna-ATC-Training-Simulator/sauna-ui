on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture to build for'
        required: true
        type: string
      rust-arch:
        description: 'Architecture for Rust'
        required: true
        type: string
      os:
        description: 'OS for the GitHub Actions Runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      short-os:
        description: 'Short form for OS'
        required: false
        default: 'linux'
        type: string
      rust-os:
        description: 'Rust OS target'
        required: false
        default: 'unknown-linux-gnu'
        type: string
      tauri-bundles:
        description: 'Which Tauri bundles to build'
        required: false
        default: 'all'
        type: string
      publish-release:
        description: 'Whether or not to upload bundle artifacts'
        default: false
        required: false
        type: boolean
      api-ref:
        description: 'Sauna API git Ref'
        default: 'master'
        required: false
        type: string
      tauri-create-updater:
        description: 'Should updater be created?'
        default: true
        required: false
        type: boolean
    outputs:
      release-tag:
        description: "Draft Release Tag"
        value: ${{ jobs.build.outputs.release-tag }}

jobs:
  build:
    runs-on: ${{ inputs.os }}
    outputs:
      release-tag: v${{ steps.app-variables.outputs.appVersion }}
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Checkout Sauna API
        uses: actions/checkout@v4
        with:
          repository: 'sauna-sim/sauna-api'
          ref: ${{ inputs.api-ref }}
          path: 'sauna-api'
      - name: Checkout Sauna Vatsim Private
        uses: actions/checkout@v4
        with:
          repository: 'sauna-sim/sauna-vatsim-private'
          token: ${{ secrets.SAUNA_PAT }}
          path: 'sauna-vatsim-private'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x.x
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          prefix-key: "${{ inputs.short-os }}-${{ inputs.arch }}"
          shared-key: "tauri-build"
          workspaces: |
            ./src-tauri -> target
            ./sauna-vatsim-private -> bin
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}
      - name: Install Linux Dependencies
        if: ${{ inputs.short-os == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libappindicator3-dev librsvg2-dev libudev-dev patchelf \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2
      - name: Build Sauna API
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-api/sauna-api
          dotnet build --verbosity normal -c Release -r ${{ inputs.short-os }}-${{ inputs.arch }} -p:PlatformTarget=${{ inputs.arch }} -o ${{ github.workspace }}/src-tauri/sauna-api --self-contained
      - name: Build Sauna Vatsim Private
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-vatsim-private
          cargo build --verbose --target-dir ${{ github.workspace }}/sauna-vatsim-private/bin --target ${{ inputs.rust-arch }}-${{ inputs.rust-os }} -r
          Copy-Item -Path "${{ github.workspace }}/sauna-vatsim-private/bin/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/src-tauri/sauna-api" -Include *.dll,*.so*,*.dylib*
      - id: app-variables
        name: Get App Variables
        shell: pwsh
        run: |
          echo "$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json) v$(jq -r .version ${{ github.workspace }}/src-tauri/tauri.conf.json)"
          echo "appBinaryName=$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json)" >> $env:GITHUB_OUTPUT
          echo "appVersion=$(jq -r .version ${{ github.workspace }}/src-tauri/tauri.conf.json)" >> $env:GITHUB_OUTPUT
      - name: npm install
        run: npm install
      - name: Remove .NET 8 Linux Troublesome Dependencies
        if: ${{ inputs.short-os == 'linux' }}
        shell: pwsh
        run: |
          Remove-Item -Path "${{ github.workspace }}/src-tauri/sauna-api/libcoreclrtraceptprovider.so" -Force
      - id: tauri-build
        name: Tauri Build
        if:  ${{ inputs.publish-release }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          args: -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }} --bundles ${{ inputs.tauri-bundles }} --verbose -c '{"bundle":{"createUpdaterArtifacts":${{ inputs.tauri-create-updater }},"active":true,"resources":["sauna-api/**/*"]}}'
          includeUpdaterJson: 'true'
          tauriScript: 'npm run tauri'
          updaterJsonPreferNsis: 'true'
          releaseDraft: 'true'
          retryAttempts: 1
      - name: Build Standalone Version
        if:  ${{ inputs.publish-release }}
        shell: pwsh
        run: npm run tauri build '--' -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }} --no-bundle --verbose
      - name: Tar Gzip Build
        if: ${{ inputs.publish-release }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/out/tarpkg'
          Copy-Item -Path "${{ github.workspace }}/src-tauri/sauna-api" -Destination "${{ github.workspace }}/out/tarpkg" -Recurse
          Copy-Item -Path "${{ github.workspace }}/src-tauri/target/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/out/tarpkg" -Include ${{ steps.app-variables.outputs.appBinaryName }},${{ steps.app-variables.outputs.appBinaryName }}.exe
          cd ${{ github.workspace }}/out/tarpkg
          tar -cvzf ${{ github.workspace }}/out/SaunaSim-Standalone-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz *
      - name: Upload Tar Gzip Build
        if: ${{ inputs.publish-release }}
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ steps.app-variables.outputs.appVersion }} ${{ github.workspace }}/out/SaunaSim-Standalone-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz --clobber