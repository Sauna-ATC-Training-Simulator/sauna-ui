on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture to build for'
        required: true
        type: string
      rust-arch:
        description: 'Architecture for Rust'
        required: true
        type: string
      os:
        description: 'OS for the GitHub Actions Runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      short-os:
        description: 'Short form for OS'
        required: false
        default: 'linux'
        type: string
      rust-os:
        description: 'Rust OS target'
        required: false
        default: 'unknown-linux-gnu'
        type: string
      tauri-bundles:
        description: 'Which Tauri bundles to build'
        required: false
        default: 'all'
        type: string
      rust-target-suffix:
        description: 'Rust target suffix'
        default: ''
        required: false
        type: string
      upload-bundle-artifacts:
        description: 'Whether or not to upload bundle artifacts'
        default: false
        required: false
        type: boolean
      api-ref:
        description: 'Sauna API git Ref'
        default: 'master'
        required: false
        type: string

jobs:
  build-api:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-api'
          ref: ${{ inputs.api-ref }}
          submodules: 'recursive'
      - name: Checkout Sauna Vatsim Private Project
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-vatsim-private'
          token: ${{ secrets.SAUNA_PAT }}
          path: 'sauna-vatsim-private'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x.x
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      - name: Build
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-api
          dotnet build --verbosity normal -c Release -r ${{ inputs.short-os }}-${{ inputs.arch }} -p:PlatformTarget=${{ inputs.arch }} -o ${{ github.workspace }}/bin --self-contained
      - name: Build Sauna Vatsim Private
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-vatsim-private/sauna-vatsim-private
          dotnet build sauna-vatsim-private.csproj --verbosity normal -c Release -o ${{ github.workspace }}/bin
      - name: Tar output folder
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/bin
          tar -cvzf ${{ github.workspace }}/SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz *
      - name: Archive binaries
        uses: actions/upload-artifact@v3
        with:
          name: SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}
          path: |
            ${{ github.workspace }}/SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
  
  build:
    needs: build-api
    runs-on: ${{ inputs.os }}
    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }}
      - name: Install Linux Dependencies
        if: inputs.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget file libxdo-dev libssl-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Download Sauna-API
        uses: actions/download-artifact@v3
        with:
          name: SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}
          path: ${{ github.workspace }}/src-tauri/sauna-api
      - name: Extract Sauna-API
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/src-tauri/sauna-api
          tar -xvf SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
          rm SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
      - name: npm install
        run: npm install
      - name: Build and Package
        shell: pwsh
        run: npm run package -- -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }} --bundles ${{ inputs.tauri-bundles }} -c src-tauri/tauri-prod.conf.json
      - name: Copy Installers
        if: ${{ inputs.upload-bundle-artifacts }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/installers'
          Get-ChildItem '${{ github.workspace }}/src-tauri/target/${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }}/release/bundle' -Recurse -Include *.exe,*.deb,*.dmg,*.app,*.msi,*.AppImage | Copy-Item -Destination '${{ github.workspace }}/installers'
      - name: Archive Installers
        if: ${{ inputs.upload-bundle-artifacts }}
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: installers
          path: |
            ${{ github.workspace }}/installers/*