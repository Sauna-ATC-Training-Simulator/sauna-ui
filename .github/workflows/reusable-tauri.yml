on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture to build for'
        required: true
        type: string
      rust-arch:
        description: 'Architecture for Rust'
        required: true
        type: string
      os:
        description: 'OS for the GitHub Actions Runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      short-os:
        description: 'Short form for OS'
        required: false
        default: 'linux'
        type: string
      rust-os:
        description: 'Rust OS target'
        required: false
        default: 'unknown-linux-gnu'
        type: string
      tauri-bundles:
        description: 'Which Tauri bundles to build'
        required: false
        default: 'all'
        type: string
      rust-target-suffix:
        description: 'Rust target suffix'
        default: ''
        required: false
        type: string
      upload-bundle-artifacts:
        description: 'Whether or not to upload bundle artifacts'
        default: false
        required: false
        type: boolean
      api-ref:
        description: 'Sauna API git Ref'
        default: 'master'
        required: false
        type: string
    outputs:
      release-id:
        description: "Draft Release ID"
        value: ${{ jobs.build.outputs.release-id }}

jobs:
  build-api:
    runs-on: ${{ inputs.os }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-api'
          ref: ${{ inputs.api-ref }}
          submodules: 'recursive'
      - name: Checkout Sauna Vatsim Private Project
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-vatsim-private'
          token: ${{ secrets.SAUNA_PAT }}
          path: 'sauna-vatsim-private'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x.x
      - name: Setup NuGet
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: 'latest'
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: '${{ github.workspace }}/out/build'
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }}
      - name: Build
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-api
          dotnet build --verbosity normal -c Release -r ${{ inputs.short-os }}-${{ inputs.arch }} -p:PlatformTarget=${{ inputs.arch }} -o ${{ github.workspace }}/bin --self-contained
      - name: Build Sauna Vatsim Private
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-vatsim-private
          cargo build --verbose --target-dir ${{ github.workspace }}/out/build --target ${{ inputs.rust-arch }}-${{ inputs.rust-os }} -r
          Copy-Item -Path "${{ github.workspace }}/out/build/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/bin" -Include *.dll,*.so*,*.dylib*
      - name: Tar output folder
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/bin
          tar -cvzf ${{ github.workspace }}/SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz *
      - name: Archive binaries
        uses: actions/upload-artifact@v4
        with:
          name: SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}
          path: |
            ${{ github.workspace }}/SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
  
  build:
    needs: build-api
    runs-on: ${{ inputs.os }}
    outputs:
      release-id: ${{ steps.tauri-build.outputs.releaseId }}
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }}
      - name: Install Linux Dependencies
        if: inputs.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x.x
      - name: Download Sauna-API
        uses: actions/download-artifact@v4
        with:
          name: SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}
          path: ${{ github.workspace }}/src-tauri/sauna-api
      - name: Extract Sauna-API
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/src-tauri/sauna-api
          tar -xvf SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
          rm SaunaApi-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz
      - name: npm install
        run: npm install
      - id: tauri-build
        name: Tauri Build
        if: ${{ inputs.upload-bundle-artifacts }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          args: -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }}${{ inputs.rust-target-suffix }} --bundles ${{ inputs.tauri-bundles }} -c src-tauri/tauri-prod.conf.json --verbose
          includeUpdaterJson: 'true'
          tauriScript: 'npm run tauri'
          updaterJsonPreferNsis: 'true'
          releaseDraft: 'true'
          retryAttempts: 1