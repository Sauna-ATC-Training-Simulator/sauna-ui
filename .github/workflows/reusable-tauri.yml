on:
  workflow_call:
    inputs:
      arch:
        description: 'Architecture to build for'
        required: true
        type: string
      rust-arch:
        description: 'Architecture for Rust'
        required: true
        type: string
      os:
        description: 'OS for the GitHub Actions Runner'
        default: 'ubuntu-latest'
        required: false
        type: string
      short-os:
        description: 'Short form for OS'
        required: false
        default: 'linux'
        type: string
      rust-os:
        description: 'Rust OS target'
        required: false
        default: 'unknown-linux-gnu'
        type: string
      tauri-bundles:
        description: 'Which Tauri bundles to build'
        required: false
        default: 'all'
        type: string
      upload-bundle-artifacts:
        description: 'Whether or not to upload bundle artifacts'
        default: false
        required: false
        type: boolean
      api-ref:
        description: 'Sauna API git Ref'
        default: 'master'
        required: false
        type: string
      tauri-create-updater:
        description: 'Should updater be created?'
        default: true
        required: false
        type: boolean
    outputs:
      release-id:
        description: "Draft Release ID"
        value: ${{ jobs.build.outputs.release-id }}

jobs:
  build:
    runs-on: ${{ inputs.os }}
    outputs:
      release-id: ${{ steps.tauri-build.outputs.releaseId }}
    steps:
      - name: Checkout Sauna UI
        uses: actions/checkout@v4
      - name: Checkout Sauna API
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-api'
          ref: ${{ inputs.api-ref }}
          path: 'sauna-api'
      - name: Checkout Sauna Vatsim Private
        uses: actions/checkout@v4
        with:
          repository: 'Sauna-ATC-Training-Simulator/sauna-vatsim-private'
          token: ${{ secrets.SAUNA_PAT }}
          path: 'sauna-vatsim-private'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.x.x
      - name: Use Stable Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            ./src-tauri -> target
            ./sauna-vatsim-private -> bin
      - name: Install Rust Target
        shell: pwsh
        run: |
          rustup target add ${{ inputs.rust-arch }}-${{ inputs.rust-os }}
      - name: Install Linux Dependencies
        if: ${{ inputs.short-os == 'linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libappindicator3-dev librsvg2-dev libudev-dev patchelf \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2
      - name: Install Linux Arm64 Tools
        if: ${{ inputs.short-os == 'linux' && inputs.arch == 'arm64' }}
        run: |
          sudo apt-get install gcc-aarch64-linux-gnu -y
          echo CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc >> "$GITHUB_ENV"
      - name: Build Sauna API
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-api/sauna-api
          dotnet build --verbosity normal -c Release -r ${{ inputs.short-os }}-${{ inputs.arch }} -p:PlatformTarget=${{ inputs.arch }} -o ${{ github.workspace }}/src-tauri/sauna-api --self-contained
      - name: Build Sauna Vatsim Private
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/sauna-vatsim-private
          cargo build --verbose --target-dir ${{ github.workspace }}/sauna-vatsim-private/bin --target ${{ inputs.rust-arch }}-${{ inputs.rust-os }} -r
          Copy-Item -Path "${{ github.workspace }}/sauna-vatsim-private/bin/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/src-tauri/sauna-api" -Include *.dll,*.so*,*.dylib*
      - name: Get App Variables
        shell: pwsh
        run: |
          echo "$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json) v$(jq -r .version ${{ github.workspace }}/src-tauri/tauri.conf.json)"
          echo "APP_VERSION=$(jq -r .version ${{ github.workspace }}/src-tauri/tauri.conf.json)" >> $env:GITHUB_ENV
          echo "APP_NAME=$(jq -r .mainBinaryName ${{ github.workspace }}/src-tauri/tauri.conf.json)" >> $env:GITHUB_ENV
      - name: npm install
        run: npm install
      - name: Remove .NET 8 Linux Troublesome Dependencies
        if: ${{ inputs.short-os == 'linux' }}
        shell: pwsh
        run: |
          Remove-Item -Path "${{ github.workspace }}/src-tauri/sauna-api/libcoreclrtraceptprovider.so" -Force
      - id: tauri-build
        name: Tauri Build
        if: ${{ inputs.upload-bundle-artifacts && !(inputs.short-os == 'linux' && inputs.arch == 'arm64') }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          args: -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }} --bundles ${{ inputs.tauri-bundles }} --verbose -c '{"bundle":{"createUpdaterArtifacts":${{ inputs.tauri-create-updater }},"active":true,"resources":["sauna-api/**/*"]}}'
          includeUpdaterJson: 'true'
          tauriScript: 'npm run tauri'
          updaterJsonPreferNsis: 'true'
          releaseDraft: 'true'
          retryAttempts: 1
      - name: Tauri Build (linux-arm64)
        if: ${{ inputs.upload-bundle-artifacts && inputs.short-os == 'linux' && inputs.arch == 'arm64' }}
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv8-Bookworm.img.xz
          cpu: cortex-a72
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          #exit_on_fail: no
          commands: |
            # Prevent Rust from complaining about $HOME not matching eid home
            #export HOME=/root

            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse

            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends --no-install-suggests curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs

            # Install frontend dependencies
            npm install

            # Build the application
            npm run tauri build -- -t aarch64-unknown-linux-gnu --bundles deb,rpm --verbose -c '{"bundle":{"createUpdaterArtifacts":false,"active":true,"resources":["sauna-api/**/*"]}}'
            npm run tauri build -- -t aarch64-unknown-linux-gnu --no-bundle --verbose
      - name: Upload Tauri Bundles (linux-arm64)
        if: ${{ inputs.upload-bundle-artifacts && inputs.short-os == 'linux' && inputs.arch == 'arm64' }}
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload v${{ env.APP_VERSION }} ${{ github.workspace }}/src-tauri/target/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/bundle/deb/*.deb --clobber
          gh release upload v${{ env.APP_VERSION }} ${{ github.workspace }}/src-tauri/target/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/bundle/rpm/*.rpm --clobber
      - name: Build Standalone Version
        if: ${{ inputs.upload-bundle-artifacts && !(inputs.short-os == 'linux' && inputs.arch == 'arm64') }}
        shell: pwsh
        run: npm run tauri build '--' -t ${{ inputs.rust-arch }}-${{ inputs.rust-os }} --no-bundle --verbose
      - name: Tar Gzip Build
        if: ${{ inputs.upload-bundle-artifacts }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory '${{ github.workspace }}/out/tarpkg'
          Copy-Item -Path "${{ github.workspace }}/src-tauri/sauna-api" -Destination "${{ github.workspace }}/out/tarpkg" -Recurse
          Copy-Item -Path "${{ github.workspace }}/src-tauri/target/${{ inputs.rust-arch }}-${{ inputs.rust-os }}/release/*" -Destination "${{ github.workspace }}/out/tarpkg" -Include ${{ env.APP_NAME }},${{ env.APP_NAME }}.exe
          cd ${{ github.workspace }}/out/tarpkg
          tar -cvzf ${{ github.workspace }}/out/SaunaSim-Standalone-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz *
      - name: Upload Tar Gzip Build
        if: ${{ inputs.upload-bundle-artifacts }}
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ env.APP_VERSION }} ${{ github.workspace }}/out/SaunaSim-Standalone-${{ inputs.short-os }}-${{ inputs.arch }}.tar.gz --clobber